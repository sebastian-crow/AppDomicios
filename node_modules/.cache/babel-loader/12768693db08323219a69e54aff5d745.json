{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\"; //import counterReducer from '../../components/counter/counterSlice';\n\nimport uiReducer from \"./uiReducer\";\nimport loginReducer from \"./loginReducer\";\nimport { sessionStateReducer } from \"./sessionReducer\";\nimport customizationReducer from \"../../../customizationReducer\";\nexport * from \"./uiReducer\";\nexport * from \"./loginReducer\";\nexport * from \"./sessionReducer\";\nexport * from \"./createProductReducer\";\nexport * from \"./orderReducer\";\nexport * from \"../../../customizationReducer\";\nexport const createRootReducer = routerReducer => {\n  // create root roducer\n  const mainReducer = combineReducers({\n    router: routerReducer,\n    ui: uiReducer,\n    login: loginReducer,\n    counter: counterReducer,\n    customization: customizationReducer\n  }); // create chain of reducers\n\n  const reducerChain = [mainReducer, sessionStateReducer]; // return a reducer which chains the mainReducer with sessionReducer.\n  // Both need access to full state tree.\n\n  return (state, action) => reducerChain.reduce((newState, reducer) => reducer(newState, action), state);\n};","map":{"version":3,"sources":["/home/raven/Documents/programming/proyects/addresses_app/bery/berry-free-react-admin-template/src/store/storeAddresses/store/reducer/index.js"],"names":["combineReducers","uiReducer","loginReducer","sessionStateReducer","customizationReducer","createRootReducer","routerReducer","mainReducer","router","ui","login","counter","counterReducer","customization","reducerChain","state","action","reduce","newState","reducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,cAAc,aAAd;AACA,cAAc,gBAAd;AACA,cAAc,kBAAd;AACA,cAAc,wBAAd;AACA,cAAc,gBAAd;AACA,cAAc,+BAAd;AAGA,OAAO,MAAMC,iBAAiB,GAAIC,aAAD,IAAmB;AAClD;AACA,QAAMC,WAAW,GAAGP,eAAe,CAAC;AAClCQ,IAAAA,MAAM,EAAEF,aAD0B;AAElCG,IAAAA,EAAE,EAAER,SAF8B;AAGlCS,IAAAA,KAAK,EAAER,YAH2B;AAIlCS,IAAAA,OAAO,EAAEC,cAJyB;AAKlCC,IAAAA,aAAa,EAAET;AALmB,GAAD,CAAnC,CAFkD,CASlD;;AACA,QAAMU,YAAY,GAAG,CAACP,WAAD,EAAcJ,mBAAd,CAArB,CAVkD,CAWlD;AACA;;AACA,SAAO,CAACY,KAAD,EAAQC,MAAR,KACLF,YAAY,CAACG,MAAb,CACE,CAACC,QAAD,EAAWC,OAAX,KAAuBA,OAAO,CAACD,QAAD,EAAWF,MAAX,CADhC,EAEED,KAFF,CADF;AAKD,CAlBM","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\r\n\r\n//import counterReducer from '../../components/counter/counterSlice';\r\nimport uiReducer from \"./uiReducer\";\r\nimport loginReducer from \"./loginReducer\";\r\nimport { sessionStateReducer } from \"./sessionReducer\";\r\nimport customizationReducer from \"../../../customizationReducer\"\r\nexport * from \"./uiReducer\";\r\nexport * from \"./loginReducer\";\r\nexport * from \"./sessionReducer\";\r\nexport * from \"./createProductReducer\"\r\nexport * from \"./orderReducer\"\r\nexport * from \"../../../customizationReducer\"\r\n\r\n\r\nexport const createRootReducer = (routerReducer) => {\r\n  // create root roducer\r\n  const mainReducer = combineReducers({\r\n    router: routerReducer,\r\n    ui: uiReducer,\r\n    login: loginReducer,\r\n    counter: counterReducer,\r\n    customization: customizationReducer\r\n  });\r\n  // create chain of reducers\r\n  const reducerChain = [mainReducer, sessionStateReducer];\r\n  // return a reducer which chains the mainReducer with sessionReducer.\r\n  // Both need access to full state tree.\r\n  return (state, action) =>\r\n    reducerChain.reduce(\r\n      (newState, reducer) => reducer(newState, action),\r\n      state,\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}