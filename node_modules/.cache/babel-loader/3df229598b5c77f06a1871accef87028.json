{"ast":null,"code":"// store current state in local session store which can be restored\n// on page reload.\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { LOCATION_CHANGE } from \"redux-first-history\";\nexport const restoreSessionStateAction = createAction(\"SESSION_RESTORE_STATE\");\nexport const saveSessionStateAction = createAction(\"SESSION_SAVE_STATE\");\n\nfunction saveUiState(state) {\n  const store = window.sessionStorage;\n  const data = {\n    ui: state.ui,\n    login: state.login\n  };\n\n  try {\n    store.setItem(\"store\", JSON.stringify(data));\n  } catch (err) {// console.error(\"Unable to store state\", err);\n  }\n}\n\nfunction loadUiState(state) {\n  const store = window.sessionStorage;\n\n  try {\n    const data = JSON.parse(store.getItem(\"store\"));\n\n    if (data) {\n      state.ui = data.ui;\n      state.login = data.login;\n      store.removeItem(\"store\");\n    }\n  } catch (err) {// console.error(\"Unable to restore state\", err);\n  }\n}\n\nexport const sessionStateReducer = createReducer({}, {\n  [restoreSessionStateAction]: state => {\n    loadUiState(state);\n  },\n  [saveSessionStateAction]: state => {\n    saveUiState(state);\n  },\n  [LOCATION_CHANGE]: () => {}\n});","map":{"version":3,"sources":["/home/raven/Documents/programming/proyects/addresses_app/bery/addresses_app/src/store/storeAddresses/store/reducer/sessionReducer.js"],"names":["createAction","createReducer","LOCATION_CHANGE","restoreSessionStateAction","saveSessionStateAction","saveUiState","state","store","window","sessionStorage","data","ui","login","setItem","JSON","stringify","err","loadUiState","parse","getItem","removeItem","sessionStateReducer"],"mappings":"AAAA;AACA;AACA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAO,MAAMC,yBAAyB,GAAGH,YAAY,CAAC,uBAAD,CAA9C;AACP,OAAO,MAAMI,sBAAsB,GAAGJ,YAAY,CAAC,oBAAD,CAA3C;;AAEP,SAASK,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAMC,KAAK,GAAGC,MAAM,CAACC,cAArB;AACA,QAAMC,IAAI,GAAG;AACXC,IAAAA,EAAE,EAAEL,KAAK,CAACK,EADC;AAEXC,IAAAA,KAAK,EAAEN,KAAK,CAACM;AAFF,GAAb;;AAIA,MAAI;AACFL,IAAAA,KAAK,CAACM,OAAN,CAAc,OAAd,EAAuBC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAvB;AACD,GAFD,CAEE,OAAOM,GAAP,EAAY,CACZ;AACD;AACF;;AAED,SAASC,WAAT,CAAqBX,KAArB,EAA4B;AAC1B,QAAMC,KAAK,GAAGC,MAAM,CAACC,cAArB;;AACA,MAAI;AACF,UAAMC,IAAI,GAAGI,IAAI,CAACI,KAAL,CAAWX,KAAK,CAACY,OAAN,CAAc,OAAd,CAAX,CAAb;;AACA,QAAIT,IAAJ,EAAU;AACRJ,MAAAA,KAAK,CAACK,EAAN,GAAWD,IAAI,CAACC,EAAhB;AACAL,MAAAA,KAAK,CAACM,KAAN,GAAcF,IAAI,CAACE,KAAnB;AACAL,MAAAA,KAAK,CAACa,UAAN,CAAiB,OAAjB;AACD;AACF,GAPD,CAOE,OAAOJ,GAAP,EAAY,CACZ;AACD;AACF;;AAED,OAAO,MAAMK,mBAAmB,GAAGpB,aAAa,CAC9C,EAD8C,EAE9C;AACE,GAACE,yBAAD,GAA8BG,KAAD,IAAW;AACtCW,IAAAA,WAAW,CAACX,KAAD,CAAX;AACD,GAHH;AAIE,GAACF,sBAAD,GAA2BE,KAAD,IAAW;AACnCD,IAAAA,WAAW,CAACC,KAAD,CAAX;AACD,GANH;AAOE,GAACJ,eAAD,GAAmB,MAAM,CAAE;AAP7B,CAF8C,CAAzC","sourcesContent":["// store current state in local session store which can be restored\r\n// on page reload.\r\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { LOCATION_CHANGE } from \"redux-first-history\";\r\nexport const restoreSessionStateAction = createAction(\"SESSION_RESTORE_STATE\");\r\nexport const saveSessionStateAction = createAction(\"SESSION_SAVE_STATE\");\r\n\r\nfunction saveUiState(state) {\r\n  const store = window.sessionStorage;\r\n  const data = {\r\n    ui: state.ui,\r\n    login: state.login,\r\n  };\r\n  try {\r\n    store.setItem(\"store\", JSON.stringify(data));\r\n  } catch (err) {\r\n    // console.error(\"Unable to store state\", err);\r\n  }\r\n}\r\n\r\nfunction loadUiState(state) {\r\n  const store = window.sessionStorage;\r\n  try {\r\n    const data = JSON.parse(store.getItem(\"store\"));\r\n    if (data) {\r\n      state.ui = data.ui;\r\n      state.login = data.login;\r\n      store.removeItem(\"store\");\r\n    }\r\n  } catch (err) {\r\n    // console.error(\"Unable to restore state\", err);\r\n  }\r\n}\r\n\r\nexport const sessionStateReducer = createReducer(\r\n  {},\r\n  {\r\n    [restoreSessionStateAction]: (state) => {\r\n      loadUiState(state);\r\n    },\r\n    [saveSessionStateAction]: (state) => {\r\n      saveUiState(state);\r\n    },\r\n    [LOCATION_CHANGE]: () => {},\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}